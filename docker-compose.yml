version: '3.8'

services:
  # MongoDB数据库服务
  mongodb:
    image: mongo:7.0
    container_name: eatwhat-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: whateat
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./server/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - eatwhat-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端API服务
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: eatwhat-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${BACKEND_PORT:-3000}
      - MONGO_URI=${MONGO_URI:-mongodb://admin:password123@mongodb:27017/whateat?authSource=admin}
      - CORS_ORIGIN=${CORS_ORIGIN:-}
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    volumes:
      - ./server/uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - eatwhat-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端应用服务 - 使用优化的Alpine镜像
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: eatwhat-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-8081}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - eatwhat-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端应用服务 - 备选方案1：使用Debian镜像
  frontend-debian:
    build:
      context: ./client
      dockerfile: Dockerfile.debian
    container_name: eatwhat-frontend-debian
    restart: unless-stopped
    ports:
      - "8082:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - eatwhat-network
    profiles:
      - debian
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端应用服务 - 备选方案2：使用Yarn
  frontend-yarn:
    build:
      context: ./client
      dockerfile: Dockerfile.yarn
    container_name: eatwhat-frontend-yarn
    restart: unless-stopped
    ports:
      - "8083:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - eatwhat-network
    profiles:
      - yarn
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx反向代理（可选，用于生产环境）
  nginx:
    image: nginx:alpine
    container_name: eatwhat-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-8080}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - eatwhat-network

volumes:
  mongodb_data:
    driver: local

networks:
  eatwhat-network:
    driver: bridge 